# -*- coding: cp932 -*-

require 'dxruby'

# タイトルの指定
# 指定しなければ "DXRuby Application" となる
Window.caption = "TETRIS"

# 設定を行わなければ画面サイズは 640 * 480 になる
# 横幅指定
Window.width = 480

# 縦幅指定
Window.height = 720

# タイトル画像を title という変数に確保させる
title = Image.load "image/title.png"

# フォントサイズを Pixel で指定
font_px = Font.new 40

# 文字列 "START" の座標
START_POSITION = {
  "x" => (380/2)-50,
  "y" => (640/2)
}

# 文字列 "EXIT" の座標
EXIT_POSITION = {
  "x" => (380/2)-50,
  "y" => (640/2)+60
}

# メニューの座標を指定
menu_list = [START_POSITION, EXIT_POSITION]

# シーン選択肢用文字列
str_start = "ＳＴＡＲＴ"
str_exit = "ＥＸＩＴ"

# メニュー選択用矢印情報
arrow = {
  # "font" => "矢印に使う文字列"
  "font" => "=>",

  # "x" => x 座標
  "x" => START_POSITION["x"],

  # "y" => y 座標
  "y" => START_POSITION["y"]
}

# 初期シーンの設定: タイトル画面から始まる
scene = "TITLE"

BACKGROUND = Image.load "image/background.png"
BLOCK = Image.load "image/block.png"
WALL = Image.load "image/wall.png"

TETRIS_IMAGES = [WALL, BACKGROUND, BLOCK]

## ゲームマップ
# 20 x 10 の盤面 + 予備
tetris_map = [
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
              [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
              [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
              [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
             ]

# ブロック描画用空間のサイズ (4x4)
BLOCK_SPACE = 4

BLOCK_TYPE = {
  "L" => [
          [
           [2,1,1,1],
           [2,2,2,1],
           [1,1,1,1],
           [1,1,1,1],
          ],
          
          [
           [2,2,1,1],
           [2,1,1,1],
           [2,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,2,2,1],
           [1,1,2,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [1,2,1,1],
           [2,2,1,1],
           [1,1,1,1]
          ]
         ],

  "_|" => [
           [
            [1,1,2,1],
            [2,2,2,1],
            [1,1,1,1],
            [1,1,1,1]
           ],
           
           [
            [2,1,1,1],
            [2,1,1,1],
            [2,2,1,1],
            [1,1,1,1]
           ],
          
           [
            [2,2,2,1],
            [2,1,1,1],
            [1,1,1,1],
            [1,1,1,1]
           ],
           
           [
            [2,2,1,1],
            [1,2,1,1],
            [1,2,1,1],
            [1,1,1,1]
           ]
          ],
  
  "Z" => [
          [
           [2,2,1,1],
           [1,2,2,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [2,2,1,1],
           [2,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,2,1,1],
           [1,2,2,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [2,2,1,1],
           [2,1,1,1],
           [1,1,1,1]
          ]
        ],

  "S" => [
          [
           [1,2,2,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,1,1,1],
           [2,2,1,1],
           [1,2,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,2,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,1,1,1],
           [2,2,1,1],
           [1,2,1,1],
           [1,1,1,1]
          ]
         ],
  
  "@" => [
          [
           [2,2,1,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,2,1,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,2,1,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,2,1,1],
           [2,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ]
         ],
  
  "T" => [
          [
           [2,2,2,1],
           [1,2,1,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [2,2,1,1],
           [1,2,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [2,2,2,1],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [2,1,1,1],
           [2,2,1,1],
           [2,1,1,1],
           [1,1,1,1]
          ]
         ],
  
  "|" => [
          [
           [1,1,1,1],
           [2,2,2,2],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [1,2,1,1],
           [1,2,1,1],
           [1,2,1,1]
          ],
          
          [
           [1,1,1,1],
           [2,2,2,2],
           [1,1,1,1],
           [1,1,1,1]
          ],
          
          [
           [1,2,1,1],
           [1,2,1,1],
           [1,2,1,1],
           [1,2,1,1]
          ]
         ]
}

# ブロック出現時初期位置の指定
BLOCK_INIT_POINT_X = 5
BLOCK_INIT_POINT_Y = 0

# マップ上のブロック表示基点座標
x = BLOCK_INIT_POINT_X
y = BLOCK_INIT_POINT_Y

# 各種変数定義
# ブロックスコープの問題でループの外に出しておく必要あり。
phase = nil
map = nil
current_block = nil
current_block_type = []
i = 0
at_time = Time.now
line_count = 20


def column_background?(block, column)
  if block[0][column] == 1 &&
      block[1][column] == 1 &&
      block[2][column] == 1 &&
      block[3][column] == 1

    return true
  end

  return false
end

def line_background?(block, line)
  if block[line][0] == 1 &&
      block[line][1] == 1 &&
      block[line][2] == 1 &&
      block[line][3] == 1

    return true
  end

  return false
end

def line_background?(block, line)
  if block[line][0] == 1 &&
      block[line][1] == 1 &&
      block[line][2] == 1 &&
      block[line][3] == 1

    return true
  end

  return false
end

def column_collision_safe?(map, block, column, x, y, stat)
  if stat == "left"
    if  (map[y][x + column - 1] * block[0][column] == 1 ||
         map[y][x + column - 1] * block[0][column] == 2) &&
        (map[y + 1][x + column - 1] * block[1][column] == 1 ||
         map[y + 1][x + column - 1] * block[1][column] == 2) &&
        (map[y + 2][x + column - 1] * block[2][column] == 1 ||
         map[y + 2][x + column - 1] * block[2][column] == 2) &&
        (map[y + 3][x + column - 1] * block[3][column] == 1 ||
         map[y + 3][x + column - 1] * block[3][column] == 2)
      
      return true
    end
  end

  if stat == "right"
    if  (map[y][x + column + 1] * block[0][column] == 1 ||
         map[y][x + column + 1] * block[0][column] == 2) &&
        (map[y + 1][x + column + 1] * block[1][column] == 1 ||
         map[y + 1][x + column + 1] * block[1][column] == 2) &&
        (map[y + 2][x + column + 1] * block[2][column] == 1 ||
         map[y + 2][x + column + 1] * block[2][column] == 2) &&
        (map[y + 3][x + column + 1] * block[3][column] == 1 ||
         map[y + 3][x + column + 1] * block[3][column] == 2)

      return true
    end
  end
end

def line_collision?(map, block, line, x, y)
  if  ((map[y + line + 1][x] == 0 &&
        block[line][0] == 2) ||
       map[y + line + 1][x] + block[line][0] == 4) ||
      ((map[y + line + 1][x + 1] == 0 &&
        block[line][1] == 2) ||
        map[y + line + 1][x + 1] + block[line][1] == 4) ||
      ((map[y + line + 1][x + 2] == 0 &&
        block[line][2] == 2) ||
       map[y + line + 1][x + 2] + block[line][2] == 4) ||
      ((map[y + line + 1][x + 3] == 0 &&
        block[line][3] == 2) ||
       map[y + line + 1][x + 3] + block[line][3] == 4)

    return true
  end

  return false
end

def line_collision_safe?(map, block, line, x, y)
  return !line_collision?(map, block, line, x, y)
end

def merge_map(map, block, x, y)
  map[y][x] *= block[0][0]
  map[y][x + 1] *= block[0][1]
  map[y][x + 2] *= block[0][2]
  map[y][x + 3] *= block[0][3]

  map[y + 1][x] *= block[1][0]
  map[y + 1][x + 1] *= block[1][1]
  map[y + 1][x + 2] *= block[1][2]
  map[y + 1][x + 3] *= block[1][3]

  map[y + 2][x] *= block[2][0]
  map[y + 2][x + 1] *= block[2][1]
  map[y + 2][x + 2] *= block[2][2]
  map[y + 2][x + 3] *= block[2][3]

  map[y + 3][x] *= block[3][0]
  map[y + 3][x + 1] *= block[3][1]
  map[y + 3][x + 2] *= block[3][2]
  map[y + 3][x + 3] *= block[3][3]

  return map
end

# ゲームウィンドウ生成 & ゲーム動作処理
Window.loop do

  # TITLE 画面
  if scene == "TITLE"

    # タイトル用の画像を描画 (横座標, 縦座標, 表示画像) <- の括弧内の順番で指定する
    Window.draw (480-300)/2, (320-100)/2, title

    # 文字の描画 (横座標, 縦座標, 表示文字, 文字サイズ(Pixel 指定))
    Window.drawFont 380/2, 640/2, str_start, font_px
    Window.drawFont 380/2, (640/2)+60, str_exit, font_px
    Window.drawFont arrow["x"], arrow["y"], arrow["font"], font_px

    # ↓キーを押下すると EXIT を選択
    if Input.keyPush? K_DOWNARROW
      arrow["x"] = EXIT_POSITION["x"]
      arrow["y"] = EXIT_POSITION["y"]
    end

    # ↑キーを押下すると START を選択
    if Input.keyPush? K_UPARROW
      arrow["x"] = START_POSITION["x"]
      arrow["y"] = START_POSITION["y"]
    end

    # 選択肢処理
    if Input.keyPush? K_RETURN

      # START を選択するとゲーム開始
      if arrow["y"] == START_POSITION["y"]
        # シーン切り替えの為、ボタン入力後の待ち時間
        sleep 1
        scene = "TETRIS"
        phase = "CREATE"
      end

      # EXIT を選択するとゲーム終了
      if arrow["y"] == EXIT_POSITION["y"]
        break
      end
    end

  end
  # TITLE 画面処理ここまで

  # TETRIS 開始
  if scene == "TETRIS"
    map = Marshal.load(Marshal.dump(tetris_map))

    if phase == "CREATE"
      i = 0
      current_block_type = BLOCK_TYPE.sort_by{rand}[0][1]
      current_block = current_block_type[i]
      phase = "PLACEMENT"
    end

    if phase == "CHECK"
      if line_count == 1 && (tetris_map[line_count][2...12].include? 2)
        scene = "TITLE"
      end

      if !(tetris_map[line_count][2...12].include? 1)
        tetris_map[line_count][2...12] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        tetris_map[1..line_count] = tetris_map[0..line_count-1]
        tetris_map[0] = [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1]
        line_count = line_count + 1
      end

      if line_count == 0
        x = BLOCK_INIT_POINT_X
        y = BLOCK_INIT_POINT_Y
        line_count = 20
        phase = "CREATE"
      end

      if phase != "CREATE"
        line_count = line_count - 1
      end
    end

    if phase == "PLACEMENT"
      move = nil
      # 1 秒ごとに一段下に移動する
      if (Time.now - at_time).to_i % 2 == 1
        at_time = Time.now
        y = y + 1
        move = true
      end

      if Input.keyPush? K_A
        if i == 0
          i = 4
        end
        i = i - 1
        current_block = current_block_type[i]
      end

      if Input.keyPush? K_S
        if i == 3
          i = -1
        end
        i = i + 1
        current_block = current_block_type[i]
      end

      unless move
        if Input.keyPush? K_LEFTARROW
          if (column_background? current_block, 0) ||
              (column_collision_safe? map, current_block, 0, x, y, "left")
            if (column_collision_safe? map, current_block, 1, x, y, "left")

              x = x - 1
            end
          end
        end

        if Input.keyPush? K_RIGHTARROW
          if (column_background? current_block, 3) ||
              (column_collision_safe? map, current_block, 3, x, y, "right")
            if (column_background? current_block, 2) ||
                (column_collision_safe? map, current_block, 2, x, y, "right")
              if (column_collision_safe? map, current_block, 1, x, y, "right")

                x = x + 1
              end
            end
          end
        end

        if Input.keyPush? K_DOWNARROW
          if (line_background? current_block, 3) ||
              (line_collision_safe? map, current_block, 3, x, y)
            if (line_background? current_block, 2) ||
                (line_collision_safe? map, current_block, 2, x, y)
              y = y + 1
            end
          end
        end
      end

      if (line_collision? map, current_block, 3, x, y) ||
          (line_collision? map, current_block, 2, x, y) ||
          (line_collision? map, current_block, 1, x, y) ||
          (line_collision? map, current_block, 0, x, y)
        tetris_map = merge_map(map, current_block, x, y)
        phase = "CHECK"
      end
    end
    # PLACEMENT 終わり

    if phase != "CHECK"
      # ブロックの座標をマップに反映させる
      map = merge_map(map, current_block, x, y)
    end

    # ゲーム画面の作成
    Window.drawTile(0, 0, map, TETRIS_IMAGES, 0, 0, 14, 24)
  end
  # TETRIS 1 ゲーム分の処理ここまで

  if Input.keyPush? K_Q
    break
  end

end
# ゲーム動作処理ここまで
